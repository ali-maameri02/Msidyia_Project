"""
Django settings for Msidiya project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import environ
import os
from pathlib import Path
from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _


BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Read the Chargily key and secret from environment variables
CHARGILY_KEY = env("CHARGILY_KEY", default="Not Set")
CHARGILY_SECRET = env("CHARGILY_SECRET", default="Not Set")
CHARGILY_URL = "https://pay.chargily.net/test/api/v2/"

# Print statements to verify
print("Chargily Key:", CHARGILY_KEY)
print("Chargily Secret:", CHARGILY_SECRET)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-tir$wa786fanu%cfw#o+y8zd4-an1bo0qwqb&gvw%6f%ajl&m9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# ALLOWED_HOSTS = ["127.0.0.1", "localhost"]
ALLOWED_HOSTS = ["*"]  # Allow all hosts for development
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:5173',
# ]
CORS_ALLOW_ALL_ORIGINS = True 
# CSRF_TRUSTED_ORIGINS = ['http://localhost:5173']
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_SECURE = False  # Set to True only in production
# Application definition

INSTALLED_APPS = [
    # 'jazzmin',
        "unfold",  # before django.contrib.admin

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Account',
    'Group_Class',
    'Payment',
    'rest_framework',
    'rest_framework.authtoken',
    'allauth',
    'admin_reorder',
        "corsheaders",
    "E_wallet",


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
        'corsheaders.middleware.CorsMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]





ROOT_URLCONF = 'Msidiya.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
'OPTIONS': {
    'context_processors': [
        'django.template.context_processors.debug',
        'django.template.context_processors.request',
        'django.contrib.auth.context_processors.auth',
        'django.contrib.messages.context_processors.messages',
        'Account.context_processors.admin_context_processor',  # Ensure this line is included
    ],
},

    },
]

WSGI_APPLICATION = 'Msidiya.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'neondb',
        'USER': 'neondb_owner',
        'PASSWORD': 'npg_IqsJat1ZxB2Q',
        'HOST': 'ep-late-sea-a2iwpggp-pooler.eu-central-1.aws.neon.tech',
        'PORT': '5432',
        'OPTIONS': {
            'sslmode': 'require',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



AUTH_USER_MODEL = "Account.User"
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',

    ],
    

}


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  
    'allauth.account.auth_backends.AuthenticationBackend',# Default ModelBackend
    # Add any custom backends if needed
]





UNFOLD = {
    "SITE_TITLE": "Msidiya",
    "SITE_HEADER": "Msidiya",
    "LOGIN": {
        "image": lambda request: static("images/msidiya.png"),
        # "redirect_after": lambda request: reverse_lazy("admin:APP_MODEL_changelist"),
    },
    "SIDEBAR": {
        "show_search": False,
        "show_all_applications": False,
     
    },
      "SITE_ICON": {
        "light": lambda _ : static("/images/111.png"),  # light mode
        "dark": lambda _: static("/images/111.png"),  # dark mode
    },
         "SITE_FAVICONS": [
        {
            "rel": "icon",
            "sizes": "32x32",
            "type": "image/png",
            "href": lambda _: static("images/111.png"),
        },
    ],
          "SHOW_HISTORY": True, # show/hide "History" button, default: True
    "TABS": [],
     "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "ðŸ‡¬ðŸ‡§",
                "fr": "ðŸ‡«ðŸ‡·",
                "nl": "ðŸ‡§ðŸ‡ª",
            },
        },
    },
     
      "SIDEBAR": {
        "show_search": False,  # Search in applications and models names
        "show_all_applications": False,  # Dropdown with all applications and models
        "navigation": [
            {
                "title": _("Navigation"),
                "separator": True,  # Top border
                "collapsible": True,  # Collapsible group of links
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:index"),
                        "badge": "Account.badge_callback",
                        "permission": lambda request: request.user.is_superuser,
                    },],
                     
            },
            {
                  "title": _("Accounts"),
                "separator": True,  # Top border
                "collapsible": True,  # Collapsible group of links
                "items": [
                    {
                        "title": _("Accounts"),
                        "icon": "group",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:Account_user_changelist"),

                        "badge": "Account.utils.badge_callback",
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Notifications"),
                        "icon": "notifications",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:Account_notification_changelist"),

                        "badge": "Account.utils.notification_badge_callback",
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Chats"),
                        "icon": "chat",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:Account_chat_changelist"),

                      
                        "permission": lambda request: request.user.is_superuser,
                    },
                    # {
                    #     "title": _("Users"),
                    #     "icon": "people",
                    #     # "link": reverse_lazy("admin:users_user_changelist"),
                    # },
                ],
                },
        ],
    },
}

ADMIN_REORDER  = [
   
    {'app': 'Account', 'label': 'Accounts Management', 'models': [
        'Account.User',
        'Account.Tutor',
        'Account.Student',
    ]},
    # Other apps can follow here as needed
]
